- 	chỉ mục một hành động thực hiện
>>> lệnh 
> 	ghi chú
'' 	liên kết url hoặc folder path
**************************************

- Tạo project đảy lên git
	- Tạo thư mục dự án 'F:\MERN\project'
	- Gõ cmd lên thư mục mở comman line
		>>> git init
			> để cấu hình thư mục \project thành git repo
			> chạy xong lệnh thưc mục .get được tạo
			
		>>> git remote add origin https://github.com/mistertino/mern.git
			> gắn thư mục /project trên pc tới git đã tạo 'https://github.com/mistertino/mern.git'
			
	- Tạo file và folder commit thử lên git
		- Tạo các folder, file:
			\project\css
			\project\js
			\project\index.html		
			
		>>> git add .
			> để add những gì sẽ đưa lên git
			
		>>> git status
			> để xem git add ở bước trên đã xếp những thứ cần đẩy lên git đúng chưa	
			
		>>> git commit -m "commit html css js"
			> tạo một hành động gói hết các thứ bước trên lại để chuẩn bị push lên git
			
		>>> git branch -M main
			> chỉ định một một nhánh (một nơi) chưa cột sẽ commit lên
			
		>>> git push -u origin main
			> đẩy tất cả code lên github
			
		- Kiểm tra code đã lên git chưa?
			> truy cập Code tab trong git để xem 'https://github.com/mistertino/mern'
			
- Pull code tử git có sẵn repo về máy
	- Tạo thư mục chứa code từ git repo về '\nha cau tai'
	>>> git init
		> để cấu hình thư mục \project thành git repo
		> chạy xong lệnh thưc mục .get được tạo
			
	>>> git remote add origin https://github.com/mistertino/mern.git
		> gắn git repo vào thư mục vừa tạo 'https://github.com/mistertino/mern.git'
			
	>>> git branch -M main
		> chỉ định một một nhánh (một nơi) chưa cột sẽ commit lên
		
	>>> git pull origin main
		> Kéo hết code từ nhánh main trên git repo về thư mục
		

- HTTP protocol
	- Đọc thêm tại: 'https://vi.wikipedia.org/wiki/Hypertext_Transfer_Protocol'
- SSR & CSR
	-SSR: Server Side Rendering
		> Giao diện trả về từ sever
	-CSR: Client Side Rendering
		> Giao diện từ client
- Install ExpressJS
	- Tạo packet nodejs
		- Mở Terminal trong VSCode
		>>> npm init 
			> khởi tạo package
			
		- Enter để bỏ qua name, version, description, entry point(file chạy ứng dụng), test command -- <có thể nhập để đổi tên>
		>>> git repository: https://github.com/mistertino/mern
			> khai báo git
			
		- Đặt keyword cho packet và Author 
		
		>>> Enter 
			> để chấp nhận license
			
		>>> Enter 
			> để confirm -> tạo ra file package.json
		
		- Tạo file index.js (cùng tên với tên trong file package.json: "main": "index.js") cùng thư mục chứa file package.json
		
	- Install ExpressJS
		- Mở Terminal trong VSCode
		
		>>> npm install express
		
		- Paste đoạn code tại: 'https://expressjs.com/en/starter/hello-world.html'
				const express = require('express')
				const app = express()
				const port = 3000

				app.get('/', (req, res) => {
					res.send('Hello World!')
				})

				app.listen(port, () => {
				console.log(`Example app listening on port ${port}`)
				})
		
		>>> node index.js
			> Nhập lệnh tại terminal để chạy localhost
			
		- Truy cập địa chỉ 'http://localhost:3000' trên trình duyệt
- Install Nodemon & inspector
	- Install Nodemon
		>>> npm install --save-dev
	
		- Vào file package.json thêm: "start": "nodemon index.js", vào phần: "Scrips"
		
		>>> npm start
			> để chạy localhost (live sever)
			
		- Truy cập địa chỉ 'http://localhost:3000' trên trình duyệt	
		
	- Inspector	
		- Thêm '--inspect' vào phần "start" vừa tạo trên thành  "start": "nodemon --inspect index.js",
			> để debug app
			
		>>> npm start
			> để chạy localhost (live sever)
			
		- Truy cập địa chỉ 'http://localhost:3000' trên trình duyệt	
		
		- Chuột phải Inspect trên trình duyệt -> Có phần debug của NodeJs tại Devtools 
		
		- Chọn tab Sources mở rộng đến file index.js
			> để debug code

- Install Morgan
	>>> npm install morgan --save-dev
	
	- Khai báo const  morgan = require('morgan') vào index.js
			
	- app.use(morgan('combined')) tại index.js
		> để log ra các request
			
- 10. Template engine (handlebars)
	>>> npm install express-handlebars
	
	- Tạo thư mục src rồi move file index.js vào -> src/index.js
	
	- Tại file package.json sửa lại đường dẫn tại 'main' và 'start' (index.js thành src/index.js)
	
	- Trong thư mục src tạo các file,folder như sau:
		\src\resources\scss
		\src\resources\views\home.handlebars
			> để tạo cấu trức file, folder của template
	
	- Tại thư mục views tạo folder và file:
		\views\layouts\main.handlebars
			
	- Require Handlebars
		- Tại file index.js khai báo:
			const { engine } = require("express-handlebars"); (mỗi ver handlebars require khác nhau)
		
		- Require Path
			const path = require("path");
		
		- 	app.engine("handlebars", engine());
			app.set("view engine", "handlebars");
			app.set("views", path.join(__dirname, "resources/views"));

			app.get("/", (req, res) => {

			res.render("home");

			});
				> để chạy file home
		
		- Tại file main.handlebars:
			- Tạo cấu trức file html
				- Trong thẻ <body> thêm: '{{{body}}}'
					> để lấy content của file home apend vào layout là file main
		
	- Config Handlebars
		- Config cho file handlebars	
			- Tại file index.js cấu hình như sau:
				app.engine(".hbs", engine({extname : '.hbs'}));
				app.set("view engine", ".hbs");
					> để cấu hình định dạng file .handlebars thành .hbs (có thể cấu hình định dạng tuỳ ý) 
			- Sửa định dạng .hbs cho các file .handlebars vừa tạo
		
	- Tại thư mục views tạo folder, file như sau:
		\views\partials\header.hbs
		\views\partials\footer.hbs
		
	- Để nạp 2 file vừa tạo ở trên vào main.hbs dùng nhưu sau:
		{{> header}}
		{{> footer}}
			> Viết vào phần body (cấu trúc nạp: {{> tên file}} )

- 11. Static file & SCSS
	- Tạo folder, file như sau:
		\src\public\img
		
	- Cấu hình static file
		- Tại file index.js: app.use(express.static(path.join(__dirname, "public")))
			> để trình duyệt gặp path trên url sẽ kiếm tra thư mực public
				> VD: url = http://localhost:3000/img/logo.png 
	
	- SCSS
		>>> npm install node-sass --save-dev
		
		- Tại thư mục scss tạo file app.scss
		
		- Tại thư mục public tạo folder: \public\css
		
		- Cấu hình compile từ file .scss sang folder css
			- Tại file package.json thêm một scripts:
				"watch": "node-sass --watch src/resources/scss/ --output src/public/css/"
			
			- Tại Terminal:
				>>> npm run watch
					> để compile file app.scss sang app.css (Luôn viết css vào app.scss)
			
		- Link CSS
			- Tại file main.hbs: <link rel="stylesheet" href="/css/app.css">
			
- 12. Use Bootstrap
	- Link Bootstrap:
		- tại file views\layout\main.hbs link bootstrap:
			>>> <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
			>>> <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
				<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
				<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
				
- 13. Basic routing
	- app.get("/", (req, res) => {
		res.render("home");
	});
		> để sử dụng phương thức get với path (đường dẫn) là "/" và funtion req(request) , res(response)

- 15. Query parameters
	- Tạo 1 file search.hbs
		- views\search.hbs
	
	- Tại index.js thêm:
		app.get("/search", (req, res) => {
			res.render("search");
		});
			> để rout tới search

- 16. Form default behavior
	- Sử dụng bootstrap để tạo form search
	
	- thêm method = "GET" tại thẻ <form>
	
	- thêm name = "q" tại thẻ <input>
		> khi submit nội dung của input được đưa vào query string parameters và  mặc định url được thêm query parameters là /search?q="nội dung input"
	
	- Lấy value của input tại sever:
		- Tại file index.js thêm:
			console.log(req.query) vào funtion (req, res)
				> app.get("/search", (req, res) => {
					console.log(req.query)
					res.render("search");
				});

- 17. POST method
	- Tại thẻ <form> vừa tạo trên sửa method="POST"
		> để phương thức submit của form là post
	
	- tại file index.js thêm:
		app.post("/search", (req, res) => {
			res.send("");
		});
			> để nhận đc request với phương thức POST
	
	- Nhập value vào input rồi submit (VD: Tâm)
	
	- Inspect trên trình duyệt rồi chọn tab Network -> chọn thẻ search -> chọn tab Payload
		> Sẽ thấy được value đã nhập ở input tại Form Data (q: Tâm)
			> Mục đích sử dụng POST để value ko còn ở dạng query parameters (hiển thị trên url) mà được ẩn và đính ở Form Data (dùng cho value nhạy cảm như mật khẩu.....)
		
	- Lấy value của input tại sever:
		-	Tại file index.js:
		app.use(express.urlencoded({
			extended: true
		}));
		app.use(express.json());
			> apply middleware
	
		- Tại file index.js thêm:
			console.log(req.body) vào funtion (req, res) của phương thức post (app.post)
				> app.post("/search", (req, res) => {
					console.log(req.body)
					res.render("search");
				});
					> value của Form Data sẽ đc gắn vào biến body và trả về console.log
	
		