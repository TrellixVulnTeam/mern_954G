- Source Tree:
	- Tải 'sourcetree' để quản lý source code từ git:
		https://www.sourcetreeapp.com/
		
		- Ctrl+O để mở thư mục 'F:\MERN\project'
			> Vì folder dự án gắn với git sẵn rồi nên chỉ mở folder dự án là sourcetree sẽ tự nhận

*******************************************************

- 	chỉ mục một hành động thực hiện
>>> lệnh 
> 	ghi chú
'' 	liên kết url hoặc folder path
**************************************

- Tạo project đảy lên git
	- Tạo thư mục dự án 'F:\MERN\project'
	- Gõ cmd lên thư mục mở comman line
		>>> git init
			> để cấu hình thư mục \project thành git repo
			> chạy xong lệnh thưc mục .get được tạo
			
		>>> git remote add origin https://github.com/mistertino/mern.git
			> gắn thư mục /project trên pc tới git đã tạo 'https://github.com/mistertino/mern.git'
			
	- Tạo file và folder commit thử lên git
		- Tạo các folder, file:
			\project\css
			\project\js
			\project\index.html		
			
		>>> git add .
			> để add những gì sẽ đưa lên git
			
		>>> git status
			> để xem git add ở bước trên đã xếp những thứ cần đẩy lên git đúng chưa	
			
		>>> git commit -m "commit html css js"
			> tạo một hành động gói hết các thứ bước trên lại để chuẩn bị push lên git
			
		>>> git branch -M main
			> chỉ định một một nhánh (một nơi) chưa cột sẽ commit lên
			
		>>> git push -u origin main
			> đẩy tất cả code lên github
			
		- Kiểm tra code đã lên git chưa?
			> truy cập Code tab trong git để xem 'https://github.com/mistertino/mern'
			
- Pull code tử git có sẵn repo về máy
	- Tạo thư mục chứa code từ git repo về '\nha cau tai'
	>>> git init
		> để cấu hình thư mục \project thành git repo
		> chạy xong lệnh thưc mục .get được tạo
			
	>>> git remote add origin https://github.com/mistertino/mern.git
		> gắn git repo vào thư mục vừa tạo 'https://github.com/mistertino/mern.git'
			
	>>> git branch -M main
		> chỉ định một một nhánh (một nơi) chưa cột sẽ commit lên
		
	>>> git pull origin main
		> Kéo hết code từ nhánh main trên git repo về thư mục
		

- HTTP protocol
	- Đọc thêm tại: 'https://vi.wikipedia.org/wiki/Hypertext_Transfer_Protocol'
- SSR & CSR
	-SSR: Server Side Rendering
		> Giao diện trả về từ sever
	-CSR: Client Side Rendering
		> Giao diện từ client
- Install ExpressJS
	- Tạo packet nodejs
		- Mở Terminal trong VSCode
		>>> npm init 
			> khởi tạo package
			
		- Enter để bỏ qua name, version, description, entry point(file chạy ứng dụng), test command -- <có thể nhập để đổi tên>
		>>> git repository: https://github.com/mistertino/mern
			> khai báo git
			
		- Đặt keyword cho packet và Author 
		
		>>> Enter 
			> để chấp nhận license
			
		>>> Enter 
			> để confirm -> tạo ra file package.json
		
		- Tạo file index.js (cùng tên với tên trong file package.json: "main": "index.js") cùng thư mục chứa file package.json
		
	- Install ExpressJS
		- Mở Terminal trong VSCode
		
		>>> npm install express
		
		- Paste đoạn code tại: 'https://expressjs.com/en/starter/hello-world.html'
				const express = require('express')
				const app = express()
				const port = 3000

				app.get('/', (req, res) => {
					res.send('Hello World!')
				})

				app.listen(port, () => {
				console.log(`Example app listening on port ${port}`)
				})
		
		>>> node index.js
			> Nhập lệnh tại terminal để chạy localhost
			
		- Truy cập địa chỉ 'http://localhost:3000' trên trình duyệt
- Install Nodemon & inspector
	- Install Nodemon
		>>> npm install --save-dev
	
		- Vào file package.json thêm: "start": "nodemon index.js", vào phần: "Scrips"
		
		>>> npm start
			> để chạy localhost (live sever)
			
		- Truy cập địa chỉ 'http://localhost:3000' trên trình duyệt	
		
	- Inspector	
		- Thêm '--inspect' vào phần "start" vừa tạo trên thành  "start": "nodemon --inspect index.js",
			> để debug app
			
		>>> npm start
			> để chạy localhost (live sever)
			
		- Truy cập địa chỉ 'http://localhost:3000' trên trình duyệt	
		
		- Chuột phải Inspect trên trình duyệt -> Có phần debug của NodeJs tại Devtools 
		
		- Chọn tab Sources mở rộng đến file index.js
			> để debug code

- Install Morgan
	>>> npm install morgan --save-dev
	
	- Khai báo const  morgan = require('morgan') vào index.js
			
	- app.use(morgan('combined')) tại index.js
		> để log ra các request
			
- 10. Template engine (handlebars)
	>>> npm install express-handlebars
	
	- Tạo thư mục src rồi move file index.js vào -> src/index.js
	
	- Tại file package.json sửa lại đường dẫn tại 'main' và 'start' (index.js thành src/index.js)
	
	- Trong thư mục src tạo các file,folder như sau:
		\src\resources\scss
		\src\resources\views\home.handlebars
			> để tạo cấu trức file, folder của template
	
	- Tại thư mục views tạo folder và file:
		\views\layouts\main.handlebars
			
	- Require Handlebars
		- Tại file index.js khai báo:
			const { engine } = require("express-handlebars"); (mỗi ver handlebars require khác nhau)
		
		- Require Path
			const path = require("path");
		
		- 	app.engine("handlebars", engine());
			app.set("view engine", "handlebars");
			app.set("views", path.join(__dirname, "resources/views"));

			app.get("/", (req, res) => {

			res.render("home");

			});
				> để chạy file home
		
		- Tại file main.handlebars:
			- Tạo cấu trức file html
				- Trong thẻ <body> thêm: '{{{body}}}'
					> để lấy content của file home apend vào layout là file main
		
	- Config Handlebars
		- Config cho file handlebars	
			- Tại file index.js cấu hình như sau:
				app.engine(".hbs", engine({extname : '.hbs'}));
				app.set("view engine", ".hbs");
					> để cấu hình định dạng file .handlebars thành .hbs (có thể cấu hình định dạng tuỳ ý) 
			- Sửa định dạng .hbs cho các file .handlebars vừa tạo
		
	- Tại thư mục views tạo folder, file như sau:
		\views\partials\header.hbs
		\views\partials\footer.hbs
		
	- Để nạp 2 file vừa tạo ở trên vào main.hbs dùng nhưu sau:
		{{> header}}
		{{> footer}}
			> Viết vào phần body (cấu trúc nạp: {{> tên file}} )

- 11. Static file & SCSS
	- Tạo folder, file như sau:
		\src\public\img
		
	- Cấu hình static file
		- Tại file index.js: app.use(express.static(path.join(__dirname, "public")))
			> để trình duyệt gặp path trên url sẽ kiếm tra thư mực public
				> VD: url = http://localhost:3000/img/logo.png 
	
	- SCSS
		>>> npm install node-sass --save-dev
		
		- Tại thư mục scss tạo file app.scss
		
		- Tại thư mục public tạo folder: \public\css
		
		- Cấu hình compile từ file .scss sang folder css
			- Tại file package.json thêm một scripts:
				"watch": "node-sass --watch src/resources/scss/ --output src/public/css/"
			
			- Tại Terminal:
				>>> npm run watch
					> để compile file app.scss sang app.css (Luôn viết css vào app.scss)
			
		- Link CSS
			- Tại file main.hbs: <link rel="stylesheet" href="/css/app.css">
			
- 12. Use Bootstrap
	- Link Bootstrap:
		- tại file views\layout\main.hbs link bootstrap:
			>>> <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
			>>> <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
				<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
				<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
				
- 13. Basic routing
	- app.get("/", (req, res) => {
		res.render("home");
	});
		> để sử dụng phương thức get với path (đường dẫn) là "/" và funtion req(request) , res(response)

- 15. Query parameters
	- Tạo 1 file search.hbs
		- views\search.hbs
	
	- Tại index.js thêm:
		app.get("/search", (req, res) => {
			res.render("search");
		});
			> để rout tới search

- 16. Form default behavior
	- Sử dụng bootstrap để tạo form search
	
	- thêm method = "GET" tại thẻ <form>
	
	- thêm name = "q" tại thẻ <input>
		> khi submit nội dung của input được đưa vào query string parameters và  mặc định url được thêm query parameters là /search?q="nội dung input"
	
	- Lấy value của input tại sever:
		- Tại file index.js thêm:
			console.log(req.query) vào funtion (req, res)
				> app.get("/search", (req, res) => {
					console.log(req.query)
					res.render("search");
				});

- 17. POST method
	- Tại thẻ <form> vừa tạo trên sửa method="POST"
		> để phương thức submit của form là post
	
	- tại file index.js thêm:
		app.post("/search", (req, res) => {
			res.send("");
		});
			> để nhận đc request với phương thức POST
	
	- Nhập value vào input rồi submit (VD: Tâm)
	
	- Inspect trên trình duyệt rồi chọn tab Network -> chọn thẻ search -> chọn tab Payload
		> Sẽ thấy được value đã nhập ở input tại Form Data (q: Tâm)
			> Mục đích sử dụng POST để value ko còn ở dạng query parameters (hiển thị trên url) mà được ẩn và đính ở Form Data (dùng cho value nhạy cảm như mật khẩu.....)
		
	- Lấy value của input tại sever:
		-	Tại file index.js:
		app.use(express.urlencoded({
			extended: true
		}));
		app.use(express.json());
			> apply middleware
	
		- Tại file index.js thêm:
			console.log(req.body) vào funtion (req, res) của phương thức post (app.post)
				> app.post("/search", (req, res) => {
					console.log(req.body)
					res.render("search");
				});
					> value của Form Data sẽ đc gắn vào biến body và trả về console.log
					
- 20. [MVC] Routes & Controllers
	- Tại folder views tạo file news.hbs
	
	- Tại folder src tạo file, folder:
		src\routes\news.js
		src\app\controllers\NewsController.js
			> để tách route tại file src/index.js  thành 2 phần route và controller theo MVC 
	
	- Tại file app\controllers\NewsController.js 
		- Tạo 1 class:
			class NewsController {
				index(req, res){
					res.render('news');
				}
			}
				> để tách phần funtion từ file src\index.js qua controller
		- Xuất controller ra
			module.exports = new NewsController;
				> để có thể require NewsController bên ngoài file
	
	
	- Tại folder routes tạo file index.js (.\routes\index.js)
	
	- Tại file routes\index.js tạo 1 funtion route(app) và export nó
		function route(app){

		}

		module.exports = route;
	
	- Tại file index.js ban đầu (\blog\index.js) require  file index.js trong folder routes vừa tạo
		const route = require('./routes/index')
	
		- Truyền biến app từ file routes\index.js vào file \blog\index.js
				route(app); 
				> Sau đó có thể bỏ các route (app.get, app.post,....) đã tạo vào bắt đầu cấu hính route cho từng cái
		
	- Cấu hình router cho file routes\news.js
		- Tại file routes\news.js Require express, use Router và export
			const express = require('express');
			const router = express.Router();

			module.exports = router;	
		
		- Require Controllers (NewsController) được export từ NewsController.js
			const newsController = require('../app/controllers/NewsController');
				> để lấy đc funtion từ NewsController (index(req,res))
		
		- router.use('/', newsController.index);
			> để trỏ router tới path (path tới news) với funtion index được gọi từ NewsController.js

		- Tại file routes\index.js require file news.js đã được export
			const newsRouter = require('./news');
			
			- Tại funtion route(app) :
				app.use('/news', newsRouter);
					> để trỏ route tới newsRouter (news.js) rồi newsRouter trỏ đến và sử dụng function tại NewsController
		
		- Cấu hình nhánh con của route news:
			- Tại file NewsController.js thêm 1 phương thức (VD: show Detail):
				show(req, res) {
					res.send('News Detail');
				}
			
			- Tại file news.js thêm router
				router.use('/:slug', newsController.show);
					> để trỏ router sau news/.. với phương thức show ( router nhánh sau luôn phải nằm trên router nhánh trước)
						> để chạy truy cập address trên trình duyệt : http://localhost:3000/news/hoc-node (sau news/ điền bất kỳ)
							> Áp dụng để tạo nhiều nhánh ( mỗi nhánh có router và controller)
	
	- Cấu hính những file ko nằm trong tài nguyên cụ thể (VD: Home, Search có thể đưa vào chung 1 controller)
		- Tạo các file sau:
			src\routes\site.js
			src\app\controllers\SiteController.js
			
		- Tại SiteController.js làm tương tự như NewsController.js với 2 phương thức của home và search 
			class SiteController {
				home(req, res){
					res.render('home');
				}
				search(req, res){
					res.render('search');
				}
			}
			module.exports = new SiteController;
				> để export ra 2 phương thức home và search
		
		- Tại site.js làm tương tự như news.js require SiteController mới export và sử dụng 2 router cho home và search:
			const express = require('express');
			const router = express.Router();
			const siteController = require('../app/controllers/SiteController');

			router.use('/search', siteController.search);
			router.use('/', siteController.home);

			module.exports = router;
				> để export ra 2 router
				> Lưu ý: router nào nhánh sau thỳ ở trên nhánh trước ở dưới ('/' rồi mới đến '/search')
		
		- Tại file routes\index.js require file site.js rồi trỏ tới siteRouter
			const siteRouter = require('./site');
			app.use('/', siteRouter);
			
		-> Tạo router: Tạo Controller với phương thức rồi export -> Tạo router rồi require Controller rồi export -> Require Router rồi trỏ index tới router
		
- 21. [Windows] Install MongoDB
	- URL: mongodb://localhost:27017
		> để connect tới database
		
- 24. Prettier - Code formatter		
	>>> npm instal prettier lint-staged husky --svae-dev
		> Cài 3 thư viện prettier, lint-staged, husky
	
	- Tại file package.json thêm 1 script:
		    "beautiful": "prettier --single-quote --trailing-comma all --tab-width 4 --write \"src/**/*.{js,json,scss}\"",
			- để thực thi script beautiful : 
				>>> npm run beautiful
					> --single-quote: đổi nháy " thành '
					--trailing-comma all: thêm , cuối mỗi array hoặc object 
	
	- Format code khi commit:
		>>> npm i husky@4.2.5 --save-dev
		
		- Tại file package.json thêm:
			- "lint-staged": {
				"src/**/*.{js,json,scss}": "prettier --single-quote --trailing-comma all --tab-width 4 --write"
			},
			"husky": {
				"hooks": {
				"pre-commit": "lint-staged"
				}
			},
				> Sử dụng 2 thư viện lint-staged và husky để format code khi commit
				
- 25. [MVC] Model
	- Tại MongoDB Compass 
		- Connect và Create DataBase
			- Đặt tên DataBase và Collection Name (blog_education_dev , courses)
				- Truy cập Database vừa tạo (blog_education_dev)
					- Truy cập vào collection (courses)
						- Chọn Add Data -> Insert Doccument -> Chọn view style line
							- Tạo data rồi insert: 	
								name "Xây dựng web với nodeJS & ẼpressJS"
								description "Đây là phần mô tả cho khoá học NodeJS & Express JS"
								image "https://upload.wikimedia.org/wikipedia/vi/a/a7/Nodejs_logo_light.png"
	
	- Install Mongoose
		>>> npm install mongoose
		
	- Kết nối MongoDB
		- Tạo một database trên MongoDB Compass:
			- tên database: blod_education_dev , collection: courses
			
		- Tại folder src tại folder và file sau:
			src\config\db\index.js
			
		- Tại file src\config\db\index.js require mongoose tạo 1 funtion để connect rồi export
			const mongoose = require('mongoose');
			async function connect(){
				try{
					await mongoose.connect('mongodb://localhost:27017/blog_education_dev');
					console.log('Connected to MongoDB');
				}
			catch(e){
				console.log('Connect failed');
				}
			}
			module.exports = {connect}
			
		- Tại file src/index.js require file db\index.js vừa export
			const db = require('./config/db/index');
			
			- db.connect();
				> để connect tới Database
					> Nếu connect failed có thế sửa localhost tại file db\index.js thành 127.0.0.1
					
	- Create Model
		- Tạo file, folder sau:
			src\app\models\Coures.js
		
		- Tại file src\app\models\Coures.js :
			const mongoose = require('mongoose');
			const Schema = mongoose.Schema;
			
			const Course = new Schema({
				name: {type: String, maxLength: 255},
				description: {type: String, maxLength: 600},
				image: {type: String, maxLength: 255 },
				createAt: {type: Date, default: Date.now},
				updateAt: {type: Date, default: Date.now},
			});
				> để khai báo Schema tương ứng với document tại collection của database blod_education_dev
		
			module.exports = mongoose.model('courses', Course);
				> để export ra model chứa collection: 'courses', và Schema: Coures
					> tên collection phải giống với collection tại database
		
		- Để trả data từ database cho client:
			- Tại file src/app/controllers/SiteController.js:
				- Trong hàm home(req,res)
					thay thế render bằng :
						Course.find({}, function (err, courses) {
							if (!err) {
								res.json(courses);
							} else {
								res.status(400).json({ err: 'ERROR!' });
							}
						});
							> để trả về document của collection 'courses' dưới dạng json
	
- 26 Install JSON viewer extension
	- Install JSON viewer extension trên trình duyệt
		> để xem file json dễ hơn

- 27. [CRUD] Read from DB
	- Thêm 2 bản ghi tương tự bản ghi đầu tại collection courses
		- html, JS
		
	- Xử lý data từ database (map data sang dạng Object bình thường)
		- Tạo file, folder:
			src\util\mongoose.js
		
		- Tại src\util\mongoose.js
			module.exports = {
				multipleMongooseToObject: function (mongoose) {
					return mongoose.map((mongoose) => mongoose.toObject());
				},
				// Để sử dụng cho array document
			mongooseToObject: function (mongoose) {
					return mongoose ? mongoose.toObject() : mongoose;
				},
				// để sử dụng cho 1 document
			};
				> để export ra hàm xử lý document cho mongoose
			
	- Tại file src\app\controllers\SiteController.js:
		- Require funtion multipleMongooseToObject từ file src\util\mongoose.js vừa tạo
			const { multipleMongooseToObject } = require('../../util/mongoose');
		
		- sửa phương thức home như sau:
			home(req, res, next) {
				Course.find({})
				.then((courses) => {
					res.render('home', {
						courses: multipleMongooseToObject(courses), // để render ra trang home và mang kèm theo data courses được xử lý bởi hàm multipleMongooseToObject
					});
				})
				.catch(next);
			}
				> để render ra trang home và mang kèm theo data courses được xử lý bởi hàm multipleMongooseToObject
	
	- Truyền data vào views (file.hbs - handlebars)
		- Tại file views\home.hbs sử dụng Component/Card của bootstrap để tạo giao diện với 1 card chứa (image, name, description)
		
		- Để truyền data vào home.hbs (tạm gọi là giao diện home) sử dụng cấu trúc: (đọc thêm tại: https://handlebarsjs.com/guide/#evaluation-context)
			{{#each 'courses'}}
				{{this}}
			{{/each}}
				> courses: biến chứa data được truyền vào từ SiteController
				> dùng each để lặp các document có trong collection (các bản ghi có trong bảng) (Tại database của mình có 3 document: nodejs, html,js)
				> this : để gọi ra các field với value trong document (VD: courses.name để gọi ra value của name trong từng document) 
				- VD: <h1>{{courses.name}}</h1>, <img href"{{courses.imgae}}">

- 28. Course detail page
	- Tạo thêm các field: slug, videoID tại các document trong database
		vd: slug : nodejs
				
	- Tại file src\app\models\Coures.js thêm vào Schame:
		slug: {type: String},
			> để thêm field vào model 
	
	- Tạo 1 route và 1 controller 1 views cho courses :
		src\app\controllers\SourceController.js
		src\routes\courses.js
		src\resources\views\courses\show.hbs
		
		- Tại file src\app\controllers\SourceController.js cấu hình để truyền data như sau:
				const Course = require('../models/Course');
				const { mongooseToObject } = require('../../util/mongoose');	
				class CoursesController {
					show(req, res, next) {
						Course.findOne({ slug: req.params.slug }) //lấy 1 slug với slug: req.params.slug là query đc lấy về từ url dưới dạng query parameters - VD: url: ...../sources/nodejs quert parameters trả về là nodejs
							.then(courses => { 
								res.render('courses/show', { courses: mongooseToObject(courses) }) //để render ra trang show với truyền data được xử lý theo từng document trong courses - vì đang làm theo từng slug
							})
							.catch(next);
					}
				}
				module.exports = new CoursesController();
					> để render ra trang show với data ứng với slug trong từng document
						> VD: slug là /nodejs -> data truyền vào show sẽ tương ứng với document nào có slug là nodejs
				
		- Tại file src\routes\courses.js cấu hình route như sau:
			- require express, router như các bước tạo route
			
			- Cấu hình:
				router.get('/:slug', coursesController.show);
					> để trỏ route tới /:slug với coursesController.show được require từ CourseController.js 
						> slug là nhánh phát sinh bất kỳ của nhánh /courses
		
		- Tại file src\routes\index.js thêm:
			const coursesRouter = require('./couses');
			app.use('/courses', coursesRouter);
				> để trỏ đường dẫn .../courses/:slug
		
		- Tại src\resources\views\courses\show.hbs:
			- Tạo giao diện cho trang show 
				- Sư dụng {{courses.'tên field'}} để truyền vào data từ document 
					> VD: Truyền video từ Ytube với videoID trong database là ID video của YTube: sử dụng {{videoID}}
						 <iframe width="1029" height="579" src="https://www.youtube.com/embed/{{courses.videoID}}.......
			
	
	

	
		
	
				
		
